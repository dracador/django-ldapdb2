from django.db.models import fields as django_fields

from .backends.ldap.base import DatabaseWrapper
from .validators import validate_dn


class LdapField(django_fields.Field):
    binary_field: bool = False
    multi_valued_field: bool = False
    ordering_rule: str | None = None

    def __init__(self, *args, ordering_rule: str | None = None, hidden: bool = False, **kwargs):
        """
        :param args:
        :param ordering_rule: Override the LDAP ordering rule for this field.
                              The fields provided by django-ldapdb already have the correct ordering rules set.
        :param hidden: Hide this field from all autogenerated forms and admin interfaces.
        :param kwargs:
        """
        super().__init__(*args, **kwargs)
        if hidden:
            self.hidden = hidden

        if ordering_rule:
            self.ordering_rule = ordering_rule

    def get_db_prep_value(self, value, *_args, prepared=False, **_kwargs):
        """Prepare a value for DB interaction.

        Returns:
        - list(bytes) if not prepared
        - list(str) if prepared
        """
        if prepared:
            return value

        if value is None:
            return []

        values = value if self.multi_valued_field else [value]
        prepared_values = [self.get_prep_value(v) for v in values]

        # Remove duplicates.
        # https://tools.ietf.org/html/rfc4511#section-4.1.7 :
        # "The set of attribute values is unordered."
        # We keep those values sorted in natural order to avoid useless
        # updates to the LDAP server.
        return sorted({v for v in prepared_values if v})

    def get_db_prep_save(self, value, connection: DatabaseWrapper):
        values = self.get_db_prep_value(value, connection, prepared=False)
        if self.binary_field:
            # Already raw values; don't encode it twice.
            return values
        else:
            return [v.encode() for v in values]


class CharField(django_fields.CharField, LdapField):
    def __init__(self, *args, **kwargs):
        defaults = {'max_length': 200}
        defaults.update(kwargs)
        super().__init__(*args, **defaults)

    @staticmethod
    def from_ldap(value, connection: DatabaseWrapper):
        if len(value) == 0:
            return ''
        else:
            return value[0].decode(connection.charset)


class DistinguishedNameField(CharField):
    default_validators = [validate_dn]
